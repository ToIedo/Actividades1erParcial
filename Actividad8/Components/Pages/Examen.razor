@page "/examen"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations

<PageTitle>Exámen</PageTitle>

<div class="container mt-5">
    <h3 class="text-center mb-4">Gestión de Productos</h3>

    <!-- Mensaje de Error -->
    @if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger">@error</div>
    }

    <!-- Formulario de Producto -->
    <section class="border p-4 rounded bg-light">
        <h4 class="mb-3">Agregar o Editar Producto</h4>
        <EditForm Model="@producto" OnValidSubmit="ProcesarProducto">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="inventario" class="form-label">Número de Inventario:</label>
                    <InputNumber id="inventario" class="form-control" @bind-Value="producto.NumInventario" />
                    <ValidationMessage For="@(() => producto.NumInventario)" />
                </div>
                <div class="col-md-6 mb-3">
                    <label for="nombre" class="form-label">Nombre:</label>
                    <InputText id="nombre" class="form-control" @bind-Value="producto.Nombre" />
                    <ValidationMessage For="@(() => producto.Nombre)" />
                </div>
            </div>

            <div class="col-md-6 mb-3">
                <label class="form-label">Departamento:</label>
                <InputRadioGroup @bind-Value="producto.Departamento">
                    @foreach (var departamento in Departamentos)
                    {
                        <div class="form-check-inline">
                            <InputRadio class="form-check-input" Value="@departamento" />
                            <label class="form-check-label">@departamento</label>
                        </div>
                    }
                </InputRadioGroup>
                <ValidationMessage For="@(() => producto.Departamento)" />
            </div>



            <div class="d-flex">
                @if (!editando)
                {
                    <button class="btn btn-primary me-2" type="submit">Guardar</button>
                }
                else
                {
                    <button class="btn btn-success me-2" @onclick="ActualizarProducto">Actualizar</button>
                    <button class="btn btn-secondary" @onclick="CancelarEdicion">Cancelar</button>
                }
            </div>
        </EditForm>
    </section>

    <!-- Botones para cambiar vistas -->
    <section class="mt-4">
        <button class="btn btn-info me-2" @onclick="MostrarExistencias">Ver Existencias</button>
        <button class="btn btn-secondary" @onclick="MostrarListado">Ver Listado</button>
    </section>

    <!-- Vista de Existencias -->
    @if (vistaExistencias)
    {
        <section class="mt-4">
            <h4 class="mb-3">Existencias por Departamento</h4>
            <ul class="list-group">
                @foreach (var grupo in productos.GroupBy(p => p.Departamento))
                {
                    <li class="list-group-item">@grupo.Key: @grupo.Count()</li>
                }
            </ul>
        </section>
    }
    else
    {
        <!-- Listado de Productos -->
        <section class="mt-4">
            <h4 class="mb-3">Listado de Productos</h4>
            <table class="table table-striped">
                <thead class="table-dark">
                    <tr>
                        <th>Inventario</th>
                        <th>Nombre</th>
                        <th>Departamento</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var p in productos)
                    {
                        <tr>
                            <td>@p.NumInventario</td>
                            <td>@p.Nombre</td>
                            <td>@p.Departamento</td>
                            <td>
                                <button class="btn btn-warning btn-sm me-2" @onclick="() => EditarProducto(p)">Editar</button>
                                <button class="btn btn-danger btn-sm" @onclick="() => EliminarProducto(p)">Eliminar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </section>
    }
</div>

@code {
    private List<string> Departamentos = new() { "Frutas", "Verduras", "Lácteos" };

    private List<Producto> productos = new();
    private Producto producto = new();
    private bool editando = false;
    private bool vistaExistencias = false;
    private string error;

    private int? inventarioOriginal;

    private void ProcesarProducto()
    {
        error = string.Empty;

        if (producto.Departamento != "Frutas" && producto.Departamento != "Verduras" && producto.Departamento != "Lácteos")
        {
            error = "Debe seleccionar un departamento válido: Frutas, Verduras o Lácteos.";
            return;
        }

        if (productos.Any(p => p.NumInventario == producto.NumInventario) && !editando)
        {
            error = "Número de inventario repetido.";
            return;
        }

        if (!editando)
        {
            productos.Add(new Producto
            {
                NumInventario = producto.NumInventario,
                Nombre = producto.Nombre,
                Departamento = producto.Departamento
            });
        }

        producto = new Producto();
        editando = false;
    }

    private void EditarProducto(Producto p) {
    producto = new Producto {
        NumInventario = p.NumInventario,
        Nombre = p.Nombre,
        Departamento = p.Departamento
    };
    inventarioOriginal = p.NumInventario;
    editando = true;
    error = string.Empty;
}

    private void ActualizarProducto()
    {
        var existente = productos.FirstOrDefault(p => p.NumInventario == producto.NumInventario);
        if (existente != null)
        {
            existente.Nombre = producto.Nombre;
            existente.Departamento = producto.Departamento;
        }
        editando = false;
        producto = new Producto();
    }

    private void CancelarEdicion()
    {
        producto = new Producto();
        editando = false;
        error = string.Empty;
    }

    private void EliminarProducto(Producto p)
    {
        productos.Remove(p);
    }

    private void MostrarExistencias()
    {
        vistaExistencias = true;
    }

    private void MostrarListado()
    {
        vistaExistencias = false;
    }

    public class Producto
    {
        [Required(ErrorMessage = "El número de inventario es obligatorio.")]
        [Range(1, int.MaxValue, ErrorMessage = "Debe ser un número positivo.")]
        public int? NumInventario { get; set; }

        [Required(ErrorMessage = "El nombre es obligatorio.")]
        [MaxLength(200, ErrorMessage = "El nombre no debe superar los 200 caracteres.")]
        public string Nombre { get; set; }

        [Required(ErrorMessage = "El departamento es obligatorio.")]
        public string Departamento { get; set; }
    }
}